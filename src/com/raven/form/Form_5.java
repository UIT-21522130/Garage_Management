/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.raven.form;

import DAL.DBConnection;
import GUI.RepairGUI;
import com.toedter.calendar.JDateChooser;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.AbstractDocument;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.DocumentFilter;

/**
 *
 * @author RAVEN
 */
public class Form_5 extends javax.swing.JPanel {

    /**
     * Creates new form Form_1
     */
    DBConnection a=new DBConnection();
    Connection conn= a.ConnectDb();
    DefaultTableModel model =new DefaultTableModel();
    long impTotalMoney = 0L;
    private int m_id = 0;
    int slVTPT = 0;
    int count_row = 0;
    public Form_5() {
        initComponents();
        JTable  table = new JTable();
        JScrollPane scrollPane = new JScrollPane(table);
        table= tablePN;
        loadData();
        GetSLVTPT();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txtTENSP = new javax.swing.JTextField();
        txtSL = new javax.swing.JTextField();
        txtDonGia = new javax.swing.JTextField();
        txtThem = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablePN = new javax.swing.JTable();
        txtXoa = new javax.swing.JButton();
        txtSua = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        txtNgayNhap = new com.toedter.calendar.JDateChooser();
        jButton1 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(242, 242, 242));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jPanel4.setBackground(new java.awt.Color(176, 196, 222));

        jLabel2.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        jLabel2.setText("Ngày nhập:");

        jLabel5.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        jLabel5.setText("Tên Sản Phẩm:");

        jLabel7.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        jLabel7.setText("Số Lượng:");

        txtTENSP.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N

        txtSL.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        txtSL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSLActionPerformed(evt);
            }
        });

        txtDonGia.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        txtDonGia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDonGiaActionPerformed(evt);
            }
        });

        txtThem.setBackground(new java.awt.Color(255, 255, 255));
        txtThem.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        txtThem.setText("Thêm");
        txtThem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtThemActionPerformed(evt);
            }
        });

        tablePN.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        tablePN.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã PN", "Mã VTPT", "Số lượng nhập", "Đơn giá nhập", "Thành tiền", "Tên VTPT", "Ngày nhập", "Tổng tiền"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablePN.setCursor(new java.awt.Cursor(java.awt.Cursor.SW_RESIZE_CURSOR));
        tablePN.setRowHeight(30);
        tablePN.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                tablePNAncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        tablePN.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablePNMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tablePN);

        txtXoa.setBackground(new java.awt.Color(255, 255, 255));
        txtXoa.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        txtXoa.setText("Xóa");
        txtXoa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtXoaActionPerformed(evt);
            }
        });

        txtSua.setBackground(new java.awt.Color(255, 255, 255));
        txtSua.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        txtSua.setText("Sửa");
        txtSua.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtSuaMouseClicked(evt);
            }
        });
        txtSua.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSuaActionPerformed(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        jLabel11.setText("Đơn giá:");

        jLabel12.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        jLabel12.setText("VND");

        txtNgayNhap.setPreferredSize(new java.awt.Dimension(119, 31));
        txtNgayNhap.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtNgayNhapMouseClicked(evt);
            }
        });

        jButton1.setBackground(new java.awt.Color(255, 255, 255));
        jButton1.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        jButton1.setText("Làm mới");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel4Layout.createSequentialGroup()
                        .addComponent(txtThem, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(39, 39, 39)
                        .addComponent(txtXoa, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtSua, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel4Layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtNgayNhap, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtTENSP)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel7)
                            .addComponent(jLabel11))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtDonGia)
                            .addComponent(txtSL, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel12))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(47, 47, 47))
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 944, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(33, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap(53, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtSL, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel7))
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtNgayNhap, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtTENSP, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtDonGia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12)
                    .addComponent(jLabel11))
                .addGap(28, 28, 28)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE, false)
                    .addComponent(txtThem, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtXoa, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSua, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 381, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel6.setText("Nhập phụ tùng");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void txtThemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtThemActionPerformed
        System.out.println(checkoverwritten());
        if (checkoverwritten() == 0) 
        {
            insertVTPT();
        }
        else
        {
            JOptionPane.showMessageDialog(this, "Bạn không được phép nhập trùng thông tin với tên sản phẩm và ngày nhập đã có trong dữ liệu");
        }

    }//GEN-LAST:event_txtThemActionPerformed

    private void tablePNAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_tablePNAncestorAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_tablePNAncestorAdded

    private void tablePNMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablePNMouseClicked
        /*
        20/6
        Hang
        */
        boolean a=tablePN.isEditing();
        if (a==false){
            //JOptionPane.showMessageDialog(null, " ");
        }
        DefaultTableModel RecordTable = (DefaultTableModel) tablePN.getModel();
        int SelectRows=tablePN.getSelectedRow();
        System.out.println("SelectRows"+SelectRows);
//        txtNgayNhap.setDateFormatString(RecordTable.getValueAt(SelectRows, 6).toString());
        txtDonGia.setText(RecordTable.getValueAt(SelectRows, 3).toString());
        
        txtTENSP.setText(RecordTable.getValueAt(SelectRows, 5).toString());
        
        txtSL.setText(RecordTable.getValueAt(SelectRows, 2).toString());
        
        //m_id = (int) RecordTable.getValueAt(SelectRows, 0);
        String valueStr = (String) RecordTable.getValueAt(SelectRows, 0);
        int m_id = Integer.parseInt(valueStr);

        System.out.println("check lan dau"+m_id);
        
        Object dateValue = RecordTable.getValueAt(SelectRows, 6);
         System.out.println("dateValue"+ dateValue);


                if(SelectRows >= 0){
                Date date;
                    try {
                        date = new SimpleDateFormat("yyyy-MM-dd").parse((String)RecordTable.getValueAt(SelectRows, 6));
                        System.out.println("date"+ date);
                         txtNgayNhap.setDate(date);
                    } catch (ParseException ex) {
                        Logger.getLogger(Form_1.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
    
    }//GEN-LAST:event_tablePNMouseClicked

    private void txtXoaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtXoaActionPerformed
        // TODO add your handling code here:
        int selectedRow = tablePN.getSelectedRow();

    // Kiểm tra xem có dòng nào được chọn hay không
    if (selectedRow != -1) {
        // Lấy giá trị của MaPN và MaVTPT từ dòng đã chọn
        String valueStr1 = (String) tablePN.getValueAt(selectedRow, 0);
        int MaPN = Integer.parseInt(valueStr1);

        String valueStr2 = (String) tablePN.getValueAt(selectedRow, 1);
        int MaVTPT = Integer.parseInt(valueStr2);

        try {
            java.util.Date utilStartDate = txtNgayNhap.getDate();
            System.out.println("Ngày được chọn: " + utilStartDate);
            java.sql.Date date = new java.sql.Date(utilStartDate.getTime());
            CallableStatement cs = conn.prepareCall("{call P_Xoa_VTPT(?, ?,?)}");
            
            cs.setInt(1, MaPN);
            cs.setInt(2, MaVTPT);
            cs.setDate(3, date);
            //cs.setDate(3, txtNgayNhap.getDate();
            System.out.println("Check chay " + utilStartDate);
            cs.execute();

            JOptionPane.showMessageDialog(this, "Xóa thành công!");

            // Xóa dòng khỏi mô hình bảng
            DefaultTableModel model = (DefaultTableModel) tablePN.getModel();
            model.removeRow(selectedRow);

            // Cập nhật lại mô hình bảng
            loadData();
            resetForm();
        } catch (Exception ex) {
            System.out.println(ex.toString());
        }
    } else {
        JOptionPane.showMessageDialog(this, "Vui lòng chọn một dòng để xóa!");
    }

    }//GEN-LAST:event_txtXoaActionPerformed

    private void txtSuaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtSuaMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSuaMouseClicked

    private void txtSuaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSuaActionPerformed
        //int result = 0;
        int selectedRow = tablePN.getSelectedRow();
        int output = 0;
    // Kiểm tra xem có dòng nào được chọn hay không
    if (selectedRow != -1) {
        // Lấy giá trị của MaPN và MaVTPT từ dòng đã chọn
        String valueStr1 = (String) tablePN.getValueAt(selectedRow, 0);
        int MaPN = Integer.parseInt(valueStr1);

        String valueStr2 = (String) tablePN.getValueAt(selectedRow, 1);
        int MaVTPT = Integer.parseInt(valueStr2);
        java.util.Date utilDate = txtNgayNhap.getDate(); // Thay thế bằng trường nhập liệu Date của bạn
        java.sql.Date sql_date = new java.sql.Date(utilDate.getTime());
        String i_TenVTPT = txtTENSP.getText(); // Thay thế bằng trường nhập liệu TenVTPT của bạn
        int i_SoLuongNhap = Integer.parseInt(txtSL.getText()); // Thay thế bằng trường nhập liệu SoLuongNhap của bạn
        double i_DonGiaNhap = Double.parseDouble(txtDonGia.getText()); // Thay thế bằng trường nhập liệu DonGiaNhap của bạn

        try {
            CallableStatement cs = conn.prepareCall("{call P_CapNhap_VTPT(?, ?, ?, ?, ?, ?,?)}");
            cs.setInt(5, MaPN);
            cs.setInt(6, MaVTPT);
            cs.setDate(1, sql_date);
            cs.setString(2, i_TenVTPT);
            cs.setInt(3, i_SoLuongNhap);
            cs.setDouble(4, i_DonGiaNhap);
            cs.registerOutParameter(7, java.sql.Types.INTEGER);
            cs.execute();
            output = cs.getInt(7);
            if(output == 0 ){
                JOptionPane.showMessageDialog(null,"Không được phép cập nhật ngày nhập phụ tùng lơn hơn ngày hiện tại!");
            }
            else
            {
            JOptionPane.showMessageDialog(null, "Cập nhập thành công!");
        }
            
            // Cập nhật mô hình bảng hoặc làm mới dữ liệu trong bảng
            loadData(); // Làm mới dữ liệu bảng
            resetForm();

            // Xóa lựa chọn
            tablePN.clearSelection();
        } catch (Exception ex) {
            System.out.println(ex.toString());
        }
    } else {
        JOptionPane.showMessageDialog(this, "Vui lòng chọn một dòng để sửa!");
    }
    }//GEN-LAST:event_txtSuaActionPerformed

    private void txtDonGiaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDonGiaActionPerformed
        // TODO add your handling code here:
        XulySo(txtDonGia);
    }//GEN-LAST:event_txtDonGiaActionPerformed

    private void txtSLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSLActionPerformed
        // TODO add your handling code here:
        XulySo(txtSL);
    }//GEN-LAST:event_txtSLActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        resetForm();
        loadData();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void txtNgayNhapMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtNgayNhapMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNgayNhapMouseClicked
    
    public void loadData(){

    try {
        int number;
        Vector<String> row, column = new Vector<>();
        row = new Vector();
        Statement st = conn.createStatement();
        ResultSet rs = st.executeQuery("select * from view_phieunhap");

        ResultSetMetaData metadata = rs.getMetaData();
        number = metadata.getColumnCount(); // Trả về số cột

        for (int i = 1; i <= number; i++) {
            column.add(metadata.getColumnName(i)); // Lấy ra tiêu đề của các cột
        }

        DefaultTableModel model = (DefaultTableModel) tablePN.getModel();
        model.setColumnIdentifiers(column);
        model.setRowCount(0); // Xóa tất cả dữ liệu hiện có trong mô hình bảng

        while (rs.next()) {
            row = new Vector();
            for (int i = 1; i <= number; i++) {
                row.addElement(rs.getString(i));
            }
            model.addRow(row);
        }
        count_row = model.getRowCount();
    } catch (Exception ex) {
        System.out.println(ex.toString());
    }
    }
    
    public void checkInfo(){
        if(txtTENSP.getText().equals("")){
            JOptionPane.showMessageDialog(this,"Vui lòng điền tên sản phẩm",
               "Vui lòng kiểm tra lại thông tin!", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if(txtSL.getText().equals("")){
            JOptionPane.showMessageDialog(this, "Vui lòng điền số lượng",
               "Vui lòng kiểm tra lại thông tin!", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if(txtNgayNhap.getDate() == null){
            JOptionPane.showMessageDialog(this, "Vui lòng điền ngày nhập hàng",
               "Vui lòng kiểm tra lại thông tin!", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if(txtDonGia.getText().equals("")){
            JOptionPane.showMessageDialog(this, "Vui lòng điền đơn giá sản phẩm",
               "Vui lòng kiểm tra lại thông tin!", JOptionPane.ERROR_MESSAGE);
            return;
        }
    }
    
    public void GetSLVTPT() {
        try {
            Statement st = conn.createStatement();
            ResultSet rs = st.executeQuery("select GiaTri from v_soluongvtpt");
            if (rs.next()) {
                        // Lấy giá trị từ cột "column" trong kết quả truy vấn
                        String value = rs.getString("GiaTri");
                        
                        // Gán giá trị vào biến
                        slVTPT = Integer.valueOf(value);
                        
                        // Sử dụng biến
                        System.out.println("Giá trị của biến: " + slVTPT);
                    }
        } catch (SQLException ex) {
            Logger.getLogger(Form_1.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public void CheckSLXeSuaTrongNgay() {
        if(count_row > slVTPT) {
            JOptionPane.showMessageDialog(this, "Vượt quá số lượng xe sửa chữa trong ngày");
            return;
        }
    }
    

    
    private boolean XulyNgay(JDateChooser dateChooser) {
    try {
        // Lấy ngày hiện tại
        Date currentDate = new Date();
        
        // Lấy ngày được chọn trong JDateChooser
        Date selectedDate = dateChooser.getDate();
        
        // Kiểm tra nếu ngày được chọn lớn hơn ngày hiện tại
        if (selectedDate.after(currentDate)) {
            throw new IllegalArgumentException("Ngày phải nhỏ hơn ngày hiện tại!");
        }
        
        return true;
    } catch (IllegalArgumentException e) {
        // Hiển thị thông báo lỗi
        JOptionPane.showMessageDialog(this, "Ngày phải nhỏ hơn ngày hiện tại!");
        // Xóa ngày được chọn trong JDateChooser
        dateChooser.setDate(null);
        return false;
    }
    }
    
private boolean XulySo(JTextField textField) {
    try {
        // Kiểm tra từng ký tự trong chuỗi
        String input = textField.getText();
        int digitCount = 0;
        for (int i = 0; i < input.length(); i++) {
            char c = input.charAt(i);
            if (Character.isDigit(c)) {
                digitCount++;
            }
        }
        
        if (digitCount == 0) {
            throw new IllegalArgumentException("Vui lòng chỉ nhập số!");
        }
        
        int number = Integer.parseInt(input);
        if (number <= 0) {
            throw new IllegalArgumentException("Số phải lớn hơn 0!");
        }
        
        return true;
    } catch (IllegalArgumentException e) {
        // Hiển thị thông báo lỗi
        JOptionPane.showMessageDialog(this, e.getMessage());
        // Xóa nội dung trong textbox để người dùng nhập lại
        textField.setText("");
        return false;
    }
}


public void resetForm()
    {
        txtNgayNhap.setDate(null);
        txtSL.setText("");
        txtTENSP.setText("");
        txtDonGia.setText("");

    }

public void insertVTPT(){
        loadData();
        if (txtTENSP.getText().equals("") || txtSL.getText().equals("") || txtDonGia.getText().equals("")||txtNgayNhap.getDate() == null) {
            checkInfo();
            return;
        } 
        else      
        {
            XulyNgay(txtNgayNhap);
            XulySo(txtSL);
            XulySo(txtDonGia);
        }
        // Kiểm tra thông tin bị thiếu
//        if (txtTENSP.getText().equals("") || txtSL.getText().equals("") || txtDonGia.getText().equals("")) {
//        JOptionPane.showMessageDialog(this, "Thông tin bị thiếu, vui lòng điền đầy đủ thông tin.");
//        return; // Kết thúc phương thức nếu thông tin bị thiếu
//        }
//        if (txtTENSP.getText().equals("") || txtSL.getText().equals("0") || txtDonGia.getText().equals("0")) {
//        JOptionPane.showMessageDialog(this, "Số lượng và Đơn giá phải là số khác 0.");
//        return; // Kết thúc phương thức nếu thông tin bị thiếu
//        }
        
        
        impTotalMoney = Long.valueOf(txtSL.getText()) *  Long.valueOf(txtDonGia.getText());
        java.util.Date utilDate = txtNgayNhap.getDate();
        java.sql.Date sql_date = new java.sql.Date(utilDate.getTime());
        int output = 0;
        if(count_row >= slVTPT) {
            JOptionPane.showMessageDialog(this, "Vượt quá số lượng vật tư phụ tùng cho phép");
            return;
        }else{  
        try{
            
            CallableStatement cs = conn.prepareCall("{call P_Them_VTPT(?,?,?,?,?)}");
            cs.setDate(1, sql_date);
            cs.setString(2, txtTENSP.getText());      
            cs.setString(3, txtSL.getText());
            cs.setString(4, txtDonGia.getText());
            cs.registerOutParameter(5, java.sql.Types.INTEGER);
            
            cs.execute();
            output = cs.getInt(5);
                if(output == 0 ){
                JOptionPane.showMessageDialog(null,"Không được phép thêm ngày nhập phụ tùng lớn hơn ngày hiện tại!");
            }
            else
            {
            JOptionPane.showMessageDialog(null, "Thêm thành công!");
        }
                model.setRowCount(0);
                loadData();// trc khi load data can chuyen so cot ve 0
                resetForm();
                
            
        }
        catch(Exception ex){
           System.out.println(ex.toString());
           JOptionPane.showMessageDialog(this, "Thêm Thất bại!");
        }
        }
}

public int checkoverwritten()
    {
        int count = 0;
        try {
            
            Connection conn;
            PreparedStatement st;
            ResultSet rs;
            java.util.Date utilStartDate = txtNgayNhap.getDate();
            java.sql.Date date2 = new java.sql.Date(utilStartDate.getTime());
            conn = DriverManager.getConnection("jdbc:mysql://localhost/garage_final", "root", "");
            String sql = "Call 	P_Checkoverwritten_VTPT(?,?)";
            st = conn.prepareStatement(sql);
            st.setString(1, txtTENSP.getText());
            st.setDate(2, date2);
            rs = st.executeQuery();
            while (rs.next())
            {
                count = rs.getInt("DEM");
            }
                      
        } catch (SQLException ex) {
            Logger.getLogger(RepairGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        return count;  
    }
    
  
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tablePN;
    private javax.swing.JTextField txtDonGia;
    private com.toedter.calendar.JDateChooser txtNgayNhap;
    private javax.swing.JTextField txtSL;
    private javax.swing.JButton txtSua;
    private javax.swing.JTextField txtTENSP;
    private javax.swing.JButton txtThem;
    private javax.swing.JButton txtXoa;
    // End of variables declaration//GEN-END:variables
}
