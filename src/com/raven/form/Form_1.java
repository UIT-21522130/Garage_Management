/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.raven.form;

import DAL.DBConnection;
import DTO.TiepNhan;
import GUI.VehicleMaintenanceGUI;
import com.toedter.calendar.JDateChooser;
import java.awt.Color;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
//import oracle.jdbc.OracleTypes;

/**
 *
 * @author RAVEN
 */
public class Form_1 extends javax.swing.JPanel {

    /**
     * Creates new form Form_1
     */
    DBConnection a=new DBConnection();
    Connection conn= a.ConnectDb();
    DefaultTableModel model =new DefaultTableModel();
    Form_8 form8;
    int slxe = 0;
    int count_row = 0;
    public Form_1() {
        initComponents();
        JTable  table = new JTable();
        table = tableTN;
        loadData();
        updateComboBoxHieuXe();
        GetSLXeSuaChua();
        //CheckSLXeSuaTrongNgay();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        Phieu = new javax.swing.JPanel();
        aa = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        tb = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableTN = new javax.swing.JTable();
        txtThem = new javax.swing.JButton();
        txtXoa = new javax.swing.JButton();
        txtTim = new javax.swing.JTextField();
        textUpdate = new javax.swing.JButton();
        txtNgayTiepNhan = new com.toedter.calendar.JDateChooser();
        btTim = new javax.swing.JButton();
        txtTenChuXe = new javax.swing.JTextField();
        txtDiaChi = new javax.swing.JTextField();
        txtBienSo = new javax.swing.JTextField();
        txtSDT = new javax.swing.JTextField();
        txtHieuXe = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        jLabel14 = new javax.swing.JLabel();

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setBackground(new java.awt.Color(242, 242, 242));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        Phieu.setBackground(new java.awt.Color(176, 196, 222));
        Phieu.setMinimumSize(new java.awt.Dimension(1000, 480));
        Phieu.setPreferredSize(new java.awt.Dimension(950, 580));
        Phieu.setRequestFocusEnabled(false);

        aa.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        aa.setText("Tên chủ xe:");

        jLabel2.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        jLabel2.setText("Hiệu xe:");

        tb.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        tb.setText("Biển số:");

        jLabel5.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        jLabel5.setText("Địa chỉ:");

        jLabel6.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        jLabel6.setText("Số điên thoại:");

        jLabel8.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        jLabel8.setText("Ngày tiếp nhận:");

        tableTN.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        tableTN.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Tên chủ xe", "Biển số", "Hiệu xe", "Địa chỉ", "SĐT", "Ngày tiếp nhận"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableTN.setRowHeight(40);
        tableTN.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableTNMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tableTN);

        txtThem.setBackground(new java.awt.Color(255, 255, 255));
        txtThem.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        txtThem.setText("Thêm");
        txtThem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtThemActionPerformed(evt);
            }
        });

        txtXoa.setBackground(new java.awt.Color(255, 255, 255));
        txtXoa.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        txtXoa.setText("Xóa");
        txtXoa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtXoaActionPerformed(evt);
            }
        });

        txtTim.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        txtTim.setForeground(new java.awt.Color(204, 204, 204));
        txtTim.setText("Nhập Biển Số Xe Cần Tìm");
        txtTim.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtTimFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtTimFocusLost(evt);
            }
        });
        txtTim.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTimActionPerformed(evt);
            }
        });

        textUpdate.setBackground(new java.awt.Color(255, 255, 255));
        textUpdate.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        textUpdate.setText("Sửa");
        textUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textUpdateActionPerformed(evt);
            }
        });

        txtNgayTiepNhan.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        txtNgayTiepNhan.setPreferredSize(new java.awt.Dimension(119, 31));
        txtNgayTiepNhan.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtNgayTiepNhanMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                txtNgayTiepNhanMousePressed(evt);
            }
        });

        btTim.setBackground(new java.awt.Color(255, 255, 255));
        btTim.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        btTim.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/icon_car_search.png"))); // NOI18N
        btTim.setText("Tìm kiếm");
        btTim.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btTimActionPerformed(evt);
            }
        });

        txtTenChuXe.setPreferredSize(new java.awt.Dimension(12, 31));
        txtTenChuXe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTenChuXeActionPerformed(evt);
            }
        });

        txtDiaChi.setPreferredSize(new java.awt.Dimension(12, 31));

        txtBienSo.setPreferredSize(new java.awt.Dimension(12, 31));

        txtSDT.setPreferredSize(new java.awt.Dimension(12, 31));
        txtSDT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSDTActionPerformed(evt);
            }
        });

        txtHieuXe.setPreferredSize(new java.awt.Dimension(64, 31));
        txtHieuXe.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtHieuXeMouseClicked(evt);
            }
        });
        txtHieuXe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtHieuXeActionPerformed(evt);
            }
        });

        jButton1.setBackground(new java.awt.Color(255, 255, 255));
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/restart.png"))); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout PhieuLayout = new javax.swing.GroupLayout(Phieu);
        Phieu.setLayout(PhieuLayout);
        PhieuLayout.setHorizontalGroup(
            PhieuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PhieuLayout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(PhieuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PhieuLayout.createSequentialGroup()
                        .addComponent(txtTim)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btTim, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(PhieuLayout.createSequentialGroup()
                        .addGroup(PhieuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(aa, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(PhieuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtTenChuXe, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtDiaChi, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtHieuXe, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(49, 49, 49)
                .addGroup(PhieuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(PhieuLayout.createSequentialGroup()
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(txtThem, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31)
                        .addComponent(txtXoa, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31)
                        .addComponent(textUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(102, 102, 102))
                    .addGroup(PhieuLayout.createSequentialGroup()
                        .addGroup(PhieuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tb)
                            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(PhieuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtSDT, javax.swing.GroupLayout.PREFERRED_SIZE, 298, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtBienSo, javax.swing.GroupLayout.PREFERRED_SIZE, 298, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtNgayTiepNhan, javax.swing.GroupLayout.PREFERRED_SIZE, 298, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(121, 121, 121))))
            .addGroup(PhieuLayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 929, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        PhieuLayout.setVerticalGroup(
            PhieuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PhieuLayout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(PhieuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PhieuLayout.createSequentialGroup()
                        .addGroup(PhieuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtTenChuXe, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(aa, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(PhieuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtHieuXe, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(14, 14, 14)
                        .addGroup(PhieuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtDiaChi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(PhieuLayout.createSequentialGroup()
                        .addGroup(PhieuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tb)
                            .addComponent(txtBienSo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(PhieuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtSDT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(PhieuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(PhieuLayout.createSequentialGroup()
                                .addGap(5, 5, 5)
                                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(txtNgayTiepNhan, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                .addGroup(PhieuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PhieuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btTim)
                        .addComponent(txtTim, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(PhieuLayout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addGroup(PhieuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtThem, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtXoa, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(textUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jLabel14.setBackground(new java.awt.Color(153, 204, 255));
        jLabel14.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel14.setText("Phiếu tiếp nhận xe");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Phieu, javax.swing.GroupLayout.PREFERRED_SIZE, 938, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14))
                .addGap(54, 54, 54))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(Phieu, javax.swing.GroupLayout.PREFERRED_SIZE, 532, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 949, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(89, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void txtThemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtThemActionPerformed

        loadData();
        int output = 0;
        if (txtBienSo.getText().equals("") || txtTenChuXe.getText().equals("") || txtHieuXe.getSelectedItem() == null
            || txtDiaChi.getText().equals("") || txtSDT.getText().equals("") || txtNgayTiepNhan.getDate() == null) {
        JOptionPane.showMessageDialog(this, "Thông tin bị thiếu, vui lòng điền đầy đủ thông tin.");
        return; // Kết thúc phương thức nếu thông tin bị thiếu
    }
        XulySo(txtSDT);
        XulyChu(txtTenChuXe);
        XulyNgay(txtNgayTiepNhan);
        java.util.Date utilStartDate = txtNgayTiepNhan.getDate();
        java.sql.Date sql_date = new java.sql.Date(utilStartDate.getTime());
        //    java.util.Date utilDate = txtNgayTiepNhan.getDate();
        //    java.sql.Date sql_date = new java.sql.Date(utilDate.getTime());
        if(count_row >= slxe) {
            JOptionPane.showMessageDialog(this, "Vượt quá số lượng xe sửa chữa trong ngày");
            return;
        }else{
            try {
            CallableStatement cs = conn.prepareCall("{call P_Them_Xe(?, ?, ?, ?, ?, ?,?)}");

            cs.setString(1, txtBienSo.getText());
            cs.setString(2, txtTenChuXe.getText());
            cs.setString(3, txtHieuXe.getSelectedItem().toString());
            cs.setString(4, txtDiaChi.getText());
            cs.setString(5, txtSDT.getText());
            cs.setDate(6, sql_date);
            cs.registerOutParameter(7, java.sql.Types.INTEGER);
            cs.execute();
            output = cs.getInt(7);
            //CheckSLXeSuaTrongNgay();
            if(output == 0 ){
                JOptionPane.showMessageDialog(null,"Không được phép thêm ngày sửa chữa nhỏ hơn ngày tiếp nhận!");
            }
            else
            {
            JOptionPane.showMessageDialog(null, "Thêm thành công!");
        }
            model.setRowCount(0);
            loadData(); // Reset the table data
            resetForm();
        } catch (SQLException ex) {
        if (ex.getErrorCode() == 1062) {
            JOptionPane.showMessageDialog(this, "Biển số xe đã tồn tại.", "Lỗi", JOptionPane.ERROR_MESSAGE);
        } else {
            ex.printStackTrace();
        }
        }
        }
    

    }//GEN-LAST:event_txtThemActionPerformed

    private void txtXoaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtXoaActionPerformed
        int selectedRow = tableTN.getSelectedRow();
        if (selectedRow != -1) {
        try {
            if (conn == null) {
                System.err.println("Connection is null. Make sure to establish a database connection.");
                return;
            }

            CallableStatement statement = conn.prepareCall("{call P_Xoa_Xe(?)}");
            statement.setString(1, txtBienSo.getText());

            statement.executeUpdate();

            JOptionPane.showMessageDialog(this, "Xóa Thành Công!");
            model.setRowCount(0);
            loadData();
            resetForm();
        } catch (SQLException e) {
            System.err.println("Error executing procedure: " + e.getMessage());
    }} else {
        JOptionPane.showMessageDialog(this, "Vui lòng chọn một dòng để xóa!");
    }

    }//GEN-LAST:event_txtXoaActionPerformed

    private void txtTimActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTimActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTimActionPerformed

    private void textUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textUpdateActionPerformed
        int selectedRow = tableTN.getSelectedRow();
        int output = 0;
        if (selectedRow != -1) 
        {
        try {
            if (txtNgayTiepNhan.getDate() == null || txtTenChuXe.getText().isEmpty() || txtHieuXe.getSelectedItem() == null ||
                txtDiaChi.getText().isEmpty() || txtSDT.getText().isEmpty() || txtBienSo.getText().isEmpty()) {
                System.err.println("One or more input fields are empty or null.");
                return;
            }
            
            CallableStatement statement = null;

            java.util.Date utilStartDate = txtNgayTiepNhan.getDate();
            System.out.println("Ngày được chọn: " + utilStartDate);
            java.sql.Date date = new java.sql.Date(utilStartDate.getTime());
            
            statement = conn.prepareCall("{call P_CapNhap_Xe(?, ?, ?, ?, ?, ?,?)}");
            statement.setString(1, txtTenChuXe.getText());
            statement.setString(2, txtHieuXe.getSelectedItem().toString());
            statement.setString(3, txtDiaChi.getText());
            statement.setString(4, txtSDT.getText());
            statement.setDate(5, date);
            statement.setString(6, txtBienSo.getText());
            statement.registerOutParameter(7, java.sql.Types.INTEGER);

            statement.executeUpdate();
            output = statement.getInt(7);
            if(output == 0 ){
                JOptionPane.showMessageDialog(null,"Không được phép sửa ngày sửa chữa nhỏ hơn ngày tiếp nhận!");
            }
            else
            {
            JOptionPane.showMessageDialog(null, "Sửa thành công!");
        }
            loadData();
            resetForm();

        } catch (SQLException e) {
            System.err.println("Error executing procedure: " + e.getMessage());
        }} else {
        JOptionPane.showMessageDialog(this, "Vui lòng chọn một dòng để sửa!");
    }
    }//GEN-LAST:event_textUpdateActionPerformed

    private void btTimActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btTimActionPerformed
            try {
        String bienSo = txtTim.getText();
        // Check if the input field is filled
        if (txtTim.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Vui lòng nhập biển số xe cần tìm.", "Lỗi", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Create a connection
        try {
            // Prepare the stored procedure call
            String sql = "{CALL P_TimKiem(?)}";
            CallableStatement stmt = conn.prepareCall(sql);

            // Set the input parameter value
            stmt.setString(1, bienSo);

            // Execute the stored procedure
            ResultSet rs = stmt.executeQuery();

            // Process the returned result
            if (rs.next()) {
                // Check if the record exists
                String result = rs.getString("Result");
                if (result.equals("Record not found.")) {
                    JOptionPane.showMessageDialog(null, "Không tìm thấy bản ghi.", "Kết quả tìm kiếm", JOptionPane.WARNING_MESSAGE);
                } else {
                    // Display the found record information
                    String bienSoFound = rs.getString("BienSo");
                    String tenChuXe = rs.getString("TenChuXe");
                    String hieuXe = rs.getString("TenHieuXe");
                    String diaChi = rs.getString("DiaChi");
                    int dienThoai = rs.getInt("DienThoai");
                    Date ngayTiepNhan = rs.getDate("NgayTiepNhan");

                    txtBienSo.setText(bienSo);
                    txtTenChuXe.setText(tenChuXe);
                    txtHieuXe.setSelectedItem(hieuXe);
                    txtDiaChi.setText(diaChi);
                    txtSDT.setText(Integer.toString(dienThoai));
                    txtNgayTiepNhan.setDate(ngayTiepNhan);
                    FindData();
                    JOptionPane.showMessageDialog(this, "Tìm thành công");
                }
                FindData();
            } else {
                JOptionPane.showMessageDialog(null, "Không tìm thấy bản ghi.", "Kết quả tìm kiếm", JOptionPane.WARNING_MESSAGE);
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Biển số xe không tồn tại.", "Kết quả tìm kiếm", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
        }
    } catch (Exception e) {
        System.err.println("Error executing procedure: " + e.getMessage());
    }

    }//GEN-LAST:event_btTimActionPerformed

    private void tableTNMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableTNMouseClicked
    boolean isEditing = tableTN.isEditing();
    if (!isEditing) {
        DefaultTableModel recordTable = (DefaultTableModel) tableTN.getModel();
        int selectedRow = tableTN.getSelectedRow();
        if (selectedRow >= 0) {
            txtBienSo.setText(recordTable.getValueAt(selectedRow, 1).toString());
            txtDiaChi.setText(recordTable.getValueAt(selectedRow, 3).toString());
            txtTenChuXe.setText(recordTable.getValueAt(selectedRow, 0).toString());
            txtSDT.setText(recordTable.getValueAt(selectedRow, 4).toString());
            txtHieuXe.setSelectedItem(recordTable.getValueAt(selectedRow, 2).toString());

             //Retrieve the date value from the table
            //Object dateValue = recordTable.getValueAt(selectedRow, 5);
//            if (dateValue instanceof Date) {
////                Date selectedDate = (Date) dateValue;
////                SimpleDateFormat databaseDateFormat = new SimpleDateFormat("yyyy-MM-dd");
////                SimpleDateFormat jDateChooserDateFormat = new SimpleDateFormat("MMM d, yyyy");
//                try {
//                    // Format the date to the JDateChooser format
////                    String jDateChooserDateString = jDateChooserDateFormat.format(selectedDate);
////                    Date jDateChooserDate = jDateChooserDateFormat.parse(jDateChooserDateString);
//            Date date = new SimpleDateFormat("yyyy-MM-dd").parse((String)model.getValueAt(selectedRow, 7));
//            System.out.println("date"+ date);
//            //Ngaythutien.setDate(date);
//
//                    txtNgayTiepNhan.setDate(date);
//                } catch (ParseException ex) {
//                    ex.printStackTrace();
//                }
//            } else {
//                txtNgayTiepNhan.setDate(null);
//    
//            }
//        }
//    }
        Date date;
            try {
                date = new SimpleDateFormat("yyyy-MM-dd").parse((String)model.getValueAt(selectedRow, 5));
                System.out.println("date"+ date);
                 txtNgayTiepNhan.setDate(date);
            } catch (ParseException ex) {
                Logger.getLogger(Form_1.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
            
            //Ngaythutien.setDate(date);

                   
    
//    boolean a=tableTN.isEditing();
//        if (a==false){
//            //JOptionPane.showMessageDialog(null, " ");
//        }
//
//        DefaultTableModel RecordTable = (DefaultTableModel) tableTN.getModel();
//        int SelectRows = tableTN.getSelectedRow();
//        for(int i = 0; i < tableTN.getSelectedRow();i++ ){
//        txtBienSo.setText(RecordTable.getValueAt(SelectRows, 0).toString());
//        txtDiaChi.setText(RecordTable.getValueAt(SelectRows, 5).toString());
//        txtTenChuXe.setText(RecordTable.getValueAt(SelectRows, 3).toString());
//        txtSDT.setText(RecordTable.getValueAt(SelectRows, 6).toString());
//        txtHieuXe.setSelectedItem(RecordTable.getValueAt(SelectRows, 4).toString());
//        txtNgayTiepNhan.setDateFormatString(RecordTable.getValueAt(SelectRows, 7).toString());
//        
//        Object dateValue = RecordTable.getValueAt(SelectRows, 7);
//            if (dateValue instanceof Date) {
//                Date selectedDate = (Date) dateValue;
//                SimpleDateFormat databaseDateFormat = new SimpleDateFormat("yyyy-MM-dd");
//                SimpleDateFormat jDateChooserDateFormat = new SimpleDateFormat("MMM d, yyyy");
//                try {
//                    // Format the date to the JDateChooser format
//                    String jDateChooserDateString = jDateChooserDateFormat.format(selectedDate);
//                    Date jDateChooserDate = jDateChooserDateFormat.parse(jDateChooserDateString);
//
//                    txtNgayTiepNhan.setDate(jDateChooserDate);
//                } catch (ParseException ex) {
//                    ex.printStackTrace();
//                }
//            } else {
//                txtNgayTiepNhan.setDate(null);
//            }
//        
//        }
    
    }//GEN-LAST:event_tableTNMouseClicked

    private void txtHieuXeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtHieuXeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtHieuXeActionPerformed

    private void txtHieuXeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtHieuXeMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_txtHieuXeMouseClicked

    private void txtTimFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtTimFocusGained
    if(txtTim.getText().equals("Nhập Biển Số Xe Cần Tìm"))
        {
            txtTim.setText("");
            txtTim.setForeground(new Color(0,0,0));
        }
    }//GEN-LAST:event_txtTimFocusGained

    private void txtTimFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtTimFocusLost
        if(txtTim.getText().equals(""))
        {
            txtTim.setText("Nhập Biển Số Xe Cần Tìm");
            txtTim.setForeground(new Color(204, 204, 204));
        }
    }//GEN-LAST:event_txtTimFocusLost

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        loadData();
        resetForm();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void txtSDTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSDTActionPerformed
        // TODO add your handling code here:
        XulySo(txtSDT);
    }//GEN-LAST:event_txtSDTActionPerformed

    private void txtTenChuXeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTenChuXeActionPerformed
        // TODO add your handling code here:
        XulyChu(txtTenChuXe);
    }//GEN-LAST:event_txtTenChuXeActionPerformed

    private void txtNgayTiepNhanMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtNgayTiepNhanMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNgayTiepNhanMouseClicked

    private void txtNgayTiepNhanMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtNgayTiepNhanMousePressed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNgayTiepNhanMousePressed
private void updateComboBoxHieuXe()
    {
       // Xóa dữ liệu cũ trong combobox
        txtHieuXe.removeAllItems();
        try {     
            String sql = "Select * from hieuxe";
            PreparedStatement st = conn.prepareStatement(sql);
            ResultSet rs = st.executeQuery();
            while(rs.next())
            {
                txtHieuXe.addItem(rs.getString("TenHieuXe"));
                System.out.println("Kiem tra combobox");
            }
        } catch (Exception e) {
        }
    }
        
    public String getSelectedValue(JComboBox comboBox) {
              Object selectedItem = comboBox.getSelectedItem();
              if (selectedItem != null) {
                  String selectedValue = selectedItem.toString();
                  return selectedValue;
              } else {
                  return null;
              }
    }
    
    public void FindData() // find information
    {
        try {
            ResultSet rs;
            PreparedStatement st = null;
            st = conn.prepareStatement("CALL P_FindXe(?)");
            st.setString(1, txtTim.getText());
            rs = st.executeQuery();
            DefaultTableModel model = (DefaultTableModel) tableTN.getModel();
            model.setRowCount(0);
            while (rs.next()){    
                Object objList[] = {rs.getString("TenChuXe"), rs.getString("BienSo"), rs.getString("TenHieuXe"), 
                    rs.getString("DiaChi"), rs.getString("DienThoai"), rs.getString("NgayTiepNhan")};
                model.addRow(objList);
            }
        } catch (SQLException ex) {
            System.out.print(ex.getMessage());
        }
    }
    
    public void loadData () {
        try {
            int number;
            Vector<String> row, column = new Vector<>();
            row = new Vector();
            Statement st = conn.createStatement();
            ResultSet rs = st.executeQuery("select TenChuXe, BienSo, TenHieuXe, DiaChi, DienThoai, NgayTiepNhan from xe INNER JOIN hieuxe ON hieuxe.MaHieuXe = xe.MaHieuXe");

            ResultSetMetaData metadata = rs.getMetaData();
            number = metadata.getColumnCount();// trả về số cột
            for (int i = 1; i <= number; i++) {
                column.add(metadata.getColumnName(i)); // lay ra tieu de cua cac cot

            }
            model.setColumnIdentifiers(column);

            // Xóa bảng trước khi thêm dữ liệu
            model.setRowCount(0);

            while (rs.next()) {
                row = new Vector();
                for (int i = 1; i <= number; i++) {
                    row.addElement(rs.getString(i));
                }
                model.addRow(row);
            }
//            updateComboBoxHieuXe();
            tableTN.setModel(model);
            count_row = tableTN.getRowCount();
            System.out.println("Data row: "+ count_row);
        } catch (Exception ex) {
            System.out.println(ex.toString());
        }
    }
    
    public void resetHX()
    {
        txtHieuXe.setSelectedItem(null);
    }
   
    
    public void resetForm()
    {
        txtHieuXe.setSelectedItem(null);
        txtNgayTiepNhan.setDate(null);
        txtSDT.setText("");
        txtDiaChi.setText("");
        txtBienSo.setText("");
        txtTenChuXe.setText("");
        txtTim.setText("");
    }
    
//    public void loadData () {
//        DefaultTableModel tbl_mod = (DefaultTableModel) tableTN.getModel();
//        tbl_mod.setRowCount(0);
//        int row_count = 0;
//        try {
//            Statement st = conn.createStatement();
//            ResultSet rs = st.executeQuery("select * from view_xe");
//                    while(rs.next()){
//                        String tbData[]=
//                        {
//                         rs.getString("TenChuXe"),
//                         rs.getString("BienSo"),                         
//                         rs.getString("HieuXe"),
//                         rs.getString("DiaChi"), 
//                         rs.getString("DienThoai") ,
//                         rs.getString("NgayTiepNhan")
//                         };
//                        tbl_mod.addRow(tbData);
//                    }
//                row_count = tbl_mod.getRowCount();
//                System.out.println("row count:" + row_count);
//        } catch (SQLException ex) {
//            Logger.getLogger(Form_1.class.getName()).log(Level.SEVERE, null, ex);
//        }
//    }
    
    public void GetSLXeSuaChua() {
        try {
            Statement st = conn.createStatement();
            ResultSet rs = st.executeQuery("select GiaTri from v_soluongxesuachua");
            if (rs.next()) {
                        // Lấy giá trị từ cột "column" trong kết quả truy vấn
                        String value = rs.getString("GiaTri");
                        
                        // Gán giá trị vào biến
                        slxe = Integer.valueOf(value);
                        
                        // Sử dụng biến
                        System.out.println("Giá trị của biến: " + slxe);
                    }
        } catch (SQLException ex) {
            Logger.getLogger(Form_1.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public void CheckSLXeSuaTrongNgay() {
        if(count_row > slxe) {
            JOptionPane.showMessageDialog(this, "Vượt quá số lượng xe sửa chữa trong ngày");
            return;
        }
    }
    
//    private boolean XulySo(JTextField textField) {
//    String value = textField.getText();
//    try {
//        // Kiểm tra độ dài của số điện thoại
//        if (value.length() != 10) {
//            throw new IllegalArgumentException("Số điện thoại phải có độ dài 10 số!");
//        }
//
//        // Kiểm tra số điện thoại có bắt đầu bằng số 0
//        if (value.charAt(0) != '0') {
//            throw new IllegalArgumentException("Số điện thoại phải bắt đầu bằng số 0!");
//        }
//
//        // Kiểm tra số điện thoại có chứa ký tự không phải số
//        for (int i = 0; i < value.length(); i++) {
//            if (!Character.isDigit(value.charAt(i))) {
//                throw new IllegalArgumentException("Số điện thoại chỉ được chứa các ký tự số!");
//            }
//        }
//
//        return true;
//    } catch (IllegalArgumentException e) {
//        // Hiển thị thông báo lỗi tương ứng với từng trường hợp
//        if (e.getMessage().equals("Số điện thoại phải có độ dài 10 số!")) {
//            JOptionPane.showMessageDialog(this, "Số điện thoại phải có độ dài 10 số!");
//        } else if (e.getMessage().equals("Số điện thoại phải bắt đầu bằng số 0!")) {
//            JOptionPane.showMessageDialog(this, "Số điện thoại phải bắt đầu bằng số 0!");
//        } else if (e.getMessage().equals("Số điện thoại chỉ được chứa các ký tự số!")) {
//            JOptionPane.showMessageDialog(this, "Số điện thoại chỉ được chứa các ký tự số!");
//        }
//
//        // Xóa nội dung trong textbox để người dùng nhập lại
//        textField.setText("");
//        return false;
//    }
//}
    //
    private boolean XulySo (JTextField textField) {
    String value = textField.getText();
    try {
        // Kiểm tra độ dài của số điện thoại
        if (value.length() != 10) {
            throw new IllegalArgumentException("Số điện thoại phải có độ dài 10 số!");
        }

        // Kiểm tra số điện thoại có bắt đầu bằng số 0
        if (value.charAt(0) != '0') {
            throw new IllegalArgumentException("Số điện thoại phải bắt đầu bằng số 0!");
        }

        // Kiểm tra số điện thoại có chứa ký tự không phải số
        for (int i = 0; i < value.length(); i++) {
            if (!Character.isDigit(value.charAt(i))) {
                throw new IllegalArgumentException("Số điện thoại chỉ được chứa các ký tự số!");
            }
        }
        
        // Kiểm tra số điện thoại có lớn hơn hoặc bằng 0
        int phoneNumber = Integer.parseInt(value);
        if (phoneNumber <= 0) {
            throw new IllegalArgumentException("Số điện thoại phải lớn hơn hoặc bằng 0!");
        }

        return true;
    } catch (IllegalArgumentException e) {
        // Hiển thị thông báo lỗi tương ứng với từng trường hợp
        if (e.getMessage().equals("Số điện thoại phải có độ dài 10 số!")) {
            JOptionPane.showMessageDialog(this, "Số điện thoại phải có độ dài 10 số!");
        } else if (e.getMessage().equals("Số điện thoại phải bắt đầu bằng số 0!")) {
            JOptionPane.showMessageDialog(this, "Số điện thoại phải bắt đầu bằng số 0!");
        } else if (e.getMessage().equals("Số điện thoại chỉ được chứa các ký tự số!")) {
            JOptionPane.showMessageDialog(this, "Số điện thoại chỉ được chứa các ký tự số!");
        } else if (e.getMessage().equals("Số điện thoại phải lớn hơn hoặc bằng 0!")) {
            JOptionPane.showMessageDialog(this, "Số điện thoại phải lớn hơn hoặc bằng 0!");
        }

        // Xóa nội dung trong textbox để người dùng nhập lại
        textField.setText("");
        return false;
    }
}
    
    
    //
    
    private boolean XulyChu(JTextField textField) {
        try {
            // Kiểm tra xem họ và tên chỉ chứa chữ cái
            String fullName = textField.getText();
            if (!fullName.matches("[a-zA-Z\\s\\p{L}]+")) {
                throw new IllegalArgumentException("Họ và tên chỉ được chứa chữ cái!");
            }

            return true;
        } catch (IllegalArgumentException e) {
            // Hiển thị thông báo lỗi
            JOptionPane.showMessageDialog(this, "Họ và tên chỉ được chứa chữ cái!");
            // Xóa nội dung trong textbox để người dùng nhập lại
            textField.setText("");
            return false;
        }
    }
    
    private boolean XulyNgay(JDateChooser dateChooser) {
    try {
        // Lấy ngày hiện tại
        Date currentDate = new Date();
        
        // Lấy ngày được chọn trong JDateChooser
        Date selectedDate = dateChooser.getDate();
        
        // Kiểm tra nếu ngày được chọn lớn hơn ngày hiện tại
        if (selectedDate.after(currentDate)) {
            throw new IllegalArgumentException("Ngày phải nhỏ hơn ngày hiện tại!");
        }
        
        return true;
    } catch (IllegalArgumentException e) {
        // Hiển thị thông báo lỗi
        JOptionPane.showMessageDialog(this, "Ngày phải nhỏ hơn ngày hiện tại!");
        // Xóa ngày được chọn trong JDateChooser
        dateChooser.setDate(null);
        return false;
    }
    }




    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Phieu;
    private javax.swing.JLabel aa;
    private javax.swing.JButton btTim;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tableTN;
    private javax.swing.JLabel tb;
    private javax.swing.JButton textUpdate;
    private javax.swing.JTextField txtBienSo;
    private javax.swing.JTextField txtDiaChi;
    private javax.swing.JComboBox<String> txtHieuXe;
    private com.toedter.calendar.JDateChooser txtNgayTiepNhan;
    private javax.swing.JTextField txtSDT;
    private javax.swing.JTextField txtTenChuXe;
    private javax.swing.JButton txtThem;
    private javax.swing.JTextField txtTim;
    private javax.swing.JButton txtXoa;
    // End of variables declaration//GEN-END:variables
}
